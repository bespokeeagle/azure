# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "*" ]
    # paths:
      # - 'AKS/**'
  pull_request:
env:
  USERNAME: cf94d20e-f1a8-49c2-87e8-ec4d575c96d2
  TENANT: 59db3cb4-ec5d-42b5-9c11-579561ca8d78
  SUB: c4a740ed-c442-4bcf-98d7-3a3df9480ee6
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
    - name: az login
      run: az login --service-principal -u ${{ env.USERNAME }} -p ${{ secrets.PASSWORD }} --tenant ${{ env.TENANT }}


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd AKS && terraform init -upgrade

    # Checks that all Terraform configuration files adhere to a canonical format
   # - name: Terraform Format
    #  run: cd AKS && terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd AKS && terraform plan -var="ssh_public_key=${{ secrets.ID_RSA_PUB }}" -var="aks_service_principal_app_id=${{ secrets.AKS_SERVICE_PRINCIPAL_APP_ID }}" -var="aks_service_principal_client_secret=${{ secrets.AKS_SERVICE_PRINCIPAL_CLIENT_SECRET }}" -input=false

    # install kubectl
    - name: install kubectl
      run: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: ${{ github.ref == 'refs/heads/main' }}
      run: cd AKS && terraform apply -var="ssh_public_key=${{ secrets.ID_RSA_PUB }}" -var="aks_service_principal_app_id=${{ secrets.AKS_SERVICE_PRINCIPAL_APP_ID }}" -var="aks_service_principal_client_secret=${{ secrets.AKS_SERVICE_PRINCIPAL_CLIENT_SECRET }}" -auto-approve -input=false

    # - name: kubectl config generate
      # if: ${{ github.ref == 'refs/heads/main' }}
      # run: echo "$(terraform output kube_config)" > ./azurek8s

    # - name: kubectl config save
      # if: ${{ github.ref == 'refs/heads/main' }}
      # uses: actions/upload-artifact@v3
      # with:
        # name: kubeconfig
        # path: ./azurek8s
        # retention-days: 1


  kubectl:
    name: 'kubectl'
    needs: terraform
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
    steps:
    # # Checkout the repository t
    - name: Checkout
      uses: actions/checkout@v3
  
    # - name: download artifact
      # uses: actions/download-artifact@v3
      # with:
        # name: kubeconfig

    - name: install kubectl
      run: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: az login
      run: az login --service-principal -u ${{ env.USERNAME }} -p ${{ secrets.PASSWORD }} --tenant ${{ env.TENANT }}

    - name: apply kubectl config
      run: az aks get-credentials --resource-group rg-close-sunfish --name rama
    
    
    # - name: check config
      # run: cat ./azurek8s && export KUBECONFIG=./azurek8s

    - name: test config
      run: kubectl get nodes

    - name: install helm
      run: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update -y
        sudo apt-get install helm -y

    - name: install consul
      run: |
        helm repo add hashicorp https://helm.releases.hashicorp.com
        helm install consul hashicorp/consul -f AKS/consul/config.yaml
        
  
